#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>

#include <barrier.h>
#include <defs.h>
#include <mutex.h>
#include <perfcounter.h>

#include "matrices.h"

int is_eq(int*, int*, int);
int matmul_naive(int*, int*, int*, int, int, int);
int matmul_upmem(int*, int*, int*, int, int, int);
int test();

int mat_res_base[MATRIXA_ROWCOUNT*MATRIXB_COLCOUNT];
int mat_res_upmem[MATRIXA_ROWCOUNT*MATRIXB_COLCOUNT];

BARRIER_INIT(my_barrier, NR_TASKLETS);
MUTEX_INIT(my_mutex);

int main() {{
    test();

    barrier_wait(&my_barrier);

    mutex_lock(my_mutex);

    if(me()==0) {{
        
        printf("EQUALITY CHECK: ");
        if(is_eq(mat_res_base, mat_res_upmem, MATRIXA_ROWCOUNT*MATRIXB_COLCOUNT))
            printf("PASS\n");
        else
            printf("FAIL\n");
    }}

    mutex_unlock(my_mutex);

    return 0;
}}

int is_eq(int* A, int* B, int numbytes) {{
    int res = 1;
    for(int i=0; i<numbytes; i++) {{
        res &= (A[i] == B[i]);
    }}
    return res;
}}

int matmul_naive(int* A, int* B, int *C, int rowa, int cola, int colb) {{

    for(int i=0; i<rowa; i++) {{
        for(int j=0; j<colb; j++) {{
            C[i*colb+j] = 0;
            for(int k=0; k<cola; k++)
                C[i*colb+j] += A[i*cola+k] * B[k*colb+j]; 
        }}
    }}

    return 0;
}}

int matmul_upmem(int* A, int* B, int *C, int rowa, int cola, int colb) {{

    int chunk = (rowa/NR_TASKLETS);
    int start_row = chunk * me();

    for(int i=start_row; i<(start_row+chunk); i++) {{
        for(int j=0; j<colb; j++) {{
            C[i*colb+j] = 0;
            for(int k=0; k<cola; k++)
                C[i*colb+j] += A[i*cola+k] * B[k*colb+j]; 
        }}
    }}

    return 0;
}}

int test() {{

    perfcounter_config(COUNT_CYCLES, false);
    perfcounter_t naive_start, naive_end;

    mutex_lock(my_mutex);
    if(me()==0) {{
        naive_start = perfcounter_get();
        matmul_naive(mat1, mat2, mat_res_base, MATRIXA_ROWCOUNT, MATRIXA_COLCOUNT, MATRIXB_COLCOUNT);
        naive_end = perfcounter_get();
    }}
    mutex_unlock(my_mutex);

    perfcounter_t upmem_start = perfcounter_get();    
    matmul_upmem(mat1, mat2, mat_res_upmem, MATRIXA_ROWCOUNT, MATRIXA_COLCOUNT, MATRIXB_COLCOUNT);
    perfcounter_t upmem_end = perfcounter_get();
    
    if(me()==0)
        printf("NAIVE: %ld\nUPMEM: %ld\n", (naive_end-naive_start), (upmem_end-upmem_start));

    return 0;
}}